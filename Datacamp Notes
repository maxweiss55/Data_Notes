__________________________________________________________________________
__________________________________________________________________________
*****INTRO TO TIDYVERSE*****
__________________________________________________________________________
__________________________________________________________________________

##DOWNLOAD PACKAGES##

>>library(package/dataset)

library(dplyr)
library(tidyverse)
library(ggplot2)

__________________________________________________________________________

##FILTER##

>>filter(df, condition)

filter(gapminder, year == 2007, country == “United States”)

gapminder %>%
  filter(lifeExp > 75)

__________________________________________________________________________

##ARRANGE##

>>arrange(df, variable)

arrange(gapminder, gdp)

gapminder %>%
  arrange(desc(lifeExp))
  
__________________________________________________________________________

##MUTATE##
#Add variable to dataframe

>>mutate(df, variable = operation)

mutate(gapminder, lifeExpMonths = lifeExp*12)

gapminder %>%
  mutate(lifeExpMonths = lifeExp*12)
  
__________________________________________________________________________

##SUMMARIZE##

>>summarize(df, variable = function(var1)

summarize(gapminder, medianLifeExp = mean(lifeExp))

gapminder %>%
  summarize(medianLifeExp = median(lifeExp))
  
__________________________________________________________________________

##GROUP BY##

>>group_by(df, var1)

group_by(gapminder, year)

gapminder %>%
  group_by(year) %>%
  summarize(medianLifeExp = median(lifeExp), 
  maxGdpPercap = max(gdpPercap))
  
__________________________________________________________________________

##GGPLOT##
library(ggplot2)

>>ggplot(df, aes(x = var1, y = var2)) + #make ggplot
>>  geom_point() + #scatterplot


ggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, 
       size = gdpPercap)) +
  geom_point() +
  geom_line() +     #line plot
  geom_col() +      #bar plot
  geom_histogram(binwidth = 5) +      #histogram
  geom_boxplot() +      #boxplot
  scale_x_log10() +       #scale x by log10
  facet_wrap(~ continent) +       #FACET WRAP (different panels) # the ~ is "by"
  expand_limits(y=0) +      #expand y axis
  ggtitle("Comparing GDP per capita across continents")       #title


USING "<-" to plot certain things

by_year <- gapminder %>%
  group_by(year) %>%
  summarize(medianLifeExp = median(lifeExp),
            maxGdpPercap = max(gdpPercap))
            
ggplot(by_year, aes(x=year, y=medianLifeExp)) +
  geom_point()+
  expand_limits(y=0)
__________________________________________________________________________
__________________________________________________________________________
*****GGPLOT2 Data Visualization with ggplot2 (Part 1)*****
__________________________________________________________________________
__________________________________________________________________________

>>ggplot(df, aes(x = var1, y = var2)) + 
>>  something(anything)


ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth() #Add a smooth line


Quick and Dirty Plot: plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
#See this lesson for more on this


#TIDYING???

ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
  geom_jitter() ##Tidy mechanism

iris.wide <- iris %>%
  gather(key, value, -Species, -Flower) %>%
  separate(key, c("Part", "Measure"), "\\.") %>%
  spread(Measure, value)


#AESTHETICS#

ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl, col = am)) +
  geom_point(shape = 21, size = 4, alpha = 0.6)
  
#Above is not where the col, shape, size, etc. go...
#...any of these could be in ggplot(aes()) or geom_point()...
#...but would need (i.e. shape = 21 vs shape = var1) and give different results

ggplot(mtcars, aes(x = wt, y = mpg, label = cyl)) +
  geom_text() #Use the text as points


#GEOMETRIES#

val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
ggplot(mtcars,  aes(x = wt, y = mpg))+
  geom_bar(position = "dodge") +
  scale_x_discrete("Cylinders") + 
  scale_y_continuous("Number") +
  scale_fill_manual("Transmission", 
                    values = c("#E41A1C", "#377EB8"),
                    labels = c("Manuall", "Automatic")) 

ggplot(mtcars, aes(x = mpg, y = 0)) +
  geom_jitter(shape = 1) + #jitter things up
  scale_y_continuous(limits=c(-2,2))

# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) +
  geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = am)) +
  geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) +
  geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) +
  geom_bar(position = "dodge")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, color=cyl)) +
  geom_freqpoly(binwidth = 1, position="identity")
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
  geom_bar() +
  scale_fill_brewer(palette = "Set1")
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
  geom_rect(data = recess,
         aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
         inherit.aes = FALSE, fill = "red", alpha = 0.2) +
  geom_line()

__________________________________________________________________________
__________________________________________________________________________
*****WORKING WITH RSTUDIO IDE*****
__________________________________________________________________________
__________________________________________________________________________

#Clear Console#
Control + L

#Read in CSV#
read.csv()

#RUN CODE#
Command + Enter     #Run selected code
Command + Shift + S     #Source code, run code no output
Command + Shift + Enter       #Run everything

#View#
view(df)


#Panes Exist#


#Key board Shortcuts#

Command + Shift + M     #Pipe Operator %>%
Option + -      #Assignment arrow <-
Control + Shift + C       #Comment Out Something "#"
Option + Shift + K      #All Keyboard Shortcuts!
Command + Shift + Option + G      #Go to line number
Command + F      #Find or Find and Replace
Command + Option + o      #Close folds
Command + Option + Shift + o  #Open Folds
Control + P       #Navigate to paired symbol

#Packrat#

__________________________________________________________________________
__________________________________________________________________________
*****DPLYR: DATA MANIPULATION IN R WITH DPLYR*****
__________________________________________________________________________
__________________________________________________________________________

head(df)
summary(df)

#tbl#

dataframename_tbl <- tbl_df(dataframename)

two <- c("AA", "AS")
lut <- c("AA" = "American", 
         "AS" = "Alaska", 
         "B6" = "JetBlue")
two <- lut[two]
two

__________________________________________________________________________

##SELECT##
#Print only these columns

>>select(df, var1, var2)

select(hflights,ArrDelay,DepDelay)
select(hflights, UniqueCarrier, FlightNum, TailNum, contains("Cancel"))

starts_with("X"); ends_with("X"); contains("X"); matches("X"); 
num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,;
one_of(x): every name that appears in x, which should be a character vector.
  
__________________________________________________________________________

##SELECT##
#Print only these columns

>>select(df, var1, var2)

select(hflights,ArrDelay,DepDelay)
select(hflights, UniqueCarrier, FlightNum, TailNum, contains("Cancel"))

starts_with("X"); ends_with("X"); contains("X"); matches("X"); 
num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,;
one_of(x): every name that appears in x, which should be a character vector.
  
__________________________________________________________________________

##MUTATE##
#Add a column

mutate(df, z = x + y)

g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)

__________________________________________________________________________

##FILTER##
#Extract all rows where this is true

mutate(df, z = x + y)

g2 <- mutate(g1, GroundTime = TaxiIn + TaxiOut)

# All flights flown by one of JetBlue, Southwest, or Delta
filter(hflights, UniqueCarrier %in% c("JetBlue", "Southwest", "Delta"))

__________________________________________________________________________

##ARRANGE##
#Arrange

mutate(df,var)

# Arrange dtc according to carrier and departure delays
arrange(dtc, UniqueCarrier, DepDelay)

__________________________________________________________________________

##SUMMARISE##
#Summarise

summarise(df, name = agg_funct())

Aggregate Functions:
first(x) - The first element of vector x.
last(x) - The last element of vector x.
nth(x, n) - The nth element of vector x.
n() - The number of rows in the data.frame or group of observations that summarise() describes.
n_distinct(x) - The number of unique values in vector x.

summarise(hflights, 
          n_obs = n(), 
          n_carrier = n_distinct(UniqueCarrier), 
          n_dest = n_distinct(Dest))

__________________________________________________________________________

##PIPE##
#Pipe

%>%

hflights
hflights %>%
  mutate(RealTime = ActualElapsedTime + 100) %>%
  mutate(mph = Distance / RealTime * 60) %>%
  filter(!is.na(mph)) %>%
  filter(mph < 70) %>%
  summarize(
            n_less=n(),
            n_dest=n_distinct(Dest),
            min_dist=min(Distance),
            max_dist=max(Distance)
            )
__________________________________________________________________________

##GROUP_BY##
#Group

group_by(df, var)

hflights %>%
  filter(!is.na(ArrDelay)) %>%
  filter(ArrDelay > 0 ) %>%
  group_by(UniqueCarrier) %>%
  summarise(avg = mean(ArrDelay)) %>%
  mutate(rank = rank(avg)) %>%
  arrange(rank)

__________________________________________________________________________
__________________________________________________________________________
*****REPORTING WITH R MARKDOWN*****
__________________________________________________________________________
__________________________________________________________________________

##Styling narrative sections##

You can use Markdown to embed formatting instructions into your text. For example, you can make a word italicized by surrounding it in asterisks, bold by surrounding it in two asterisks, and monospaced (like code) by surrounding it in backticks:

*italics*
**bold**
`code`

You can turn a word into a link by surrounding it in hard brackets and then placing the link behind it in parentheses, like this:

[RStudio](www.rstudio.com)

To create titles and headers, use leading hastags. The number of hashtags determines the header's level:

# First level header
## Second level header
### Third level header

To make a bulleted list in Markdown, place each item on a new line after an asterisk and a space, like this:

* item 1
* item 2
* item 3

You can make an ordered list by placing each item on a new line after a number followed by a period followed by a space, like this

1. item 1
2. item 2
3. item 3

To embed an equation in its own centered equation block, surround the equation with two pairs of dollar signs like this,

$$1 + 1 = 2$$
To embed an equation inline, surround it with a single pair of dollar signs, like this: $1 + 1 = 2$

__________________________________________________________________________

Knitr

```{r}
# some code
```

```{r warning = FALSE, error = FALSE}
"four" + "five"
```

If echo = FALSE, R Markdown will not display the code in the final document 
(but it will still run the code and display its results unless told otherwise).

If eval = FALSE, R Markdown will not run the code or include its results, 
(but it will still display the code unless told otherwise).

If results = 'hide', R Markdown will not display the results of the code 
(but it will still run the code and display the code itself unless told otherwise).


The factorial of four is `r factorial(4)`.

```{r ref.label='simple_sum', echo = FALSE}
```

changing the output field to:

---
output: beamer_presentation
---
which creates a beamer pdf slideshow,

---
output: ioslides_presentation
---
which creates an ioslides HTML slideshow or

---
output: slidy_presentation
---
which creates a slidy HTML slideshow.

R Markdown will start a new slide at each first or second level header in your document. You can insert additional slide breaks with Markdown's horizontal rule syntax:

***

Everywhere you add these three asterisks in your text, pandoc will create a new slide.

pdf_document template to create a document that uses the zenburn style:

    ---
    title: "Demo"
    output:
      pdf_document:
        highlight: zenburn
    ---
__________________________________________________________________________

SHINY????

__________________________________________________________________________
__________________________________________________________________________
*****THE SHELL: Intro to Shell for Datascience*****
__________________________________________________________________________
__________________________________________________________________________

pwd #Where am I? Print working directory.

ls      #listing what is in current directory
ls /argument      #listing what is in this directory
ls /home/repl/seasonal

"/" slash at front means absolute path; without is relative (shortened) path

cd      #switch to new directory
cd directory      #switch to indicated directoryls

..      #means parent directory/directory above
.       #means current directory
~       #Your home directory

cp filedirectry newfiledirectory      #copy filedirectory to new filedirectory

mv filedirectry newfiledirectory      #move filedirectory to new file

mv course.txt old-course.txt      #rename file

rm filename      #remove file

rmdir       #remove directory

mkdir directory_name      #make new directory

/tmp      #make new temporary directory

cat file      #show contents of file

You can use cat to print large files and then scroll through the output, 
but it is usually more convenient to page the output. 
The original command for doing this was called more, 
but it has been superseded by a more powerful command called less. 
When you less a file, one page is displayed at a time; 
you can press spacebar to page down or type q to quit.

If you give less the names of several files, 
you can type :n (colon and a lower-case 'n') to move to the next file, 
:p to go back to the previous one, or :q to quit.

head file       #see start of file
head -n 3 seasonal/summer.csv

ls -R -F      #Show every file in current directory and subdirectory

cut -f 2-5,8 -d , values.csv      #select certain rows from a file

grep can search for patterns as well; we will explore those in the next course. What's more important right now is some of grep's more common flags:

-c: print a count of matching lines rather than the lines themselves
-h: do not print the names of files when searching multiple files
-i: ignore case (e.g., treat "Regression" and "regression" as matches)
-l: print the names of files that contain matches, not the matches
-n: print line numbers for matching lines
-v: invert the match, i.e., only show lines that don't match

As its name suggests, sort puts data in order.

Another command that is often used with sort is uniq, whose job is to remove duplicated lines. 

"|" is the pipe operator

Variable	Purpose	Value
HOME	User's home directory	/home/repl
PWD	Present working directory	Same as pwd command
SHELL	Which shell program is being used	/bin/bash
USER	User's ID	repl

echo      #will print out what follows
Varname = something      #set variable
$varname      #print what the variable is saved as

for filename in seasonal/*.csv; do echo $filename; done

nano filename     #text editor

__________________________________________________________________________
__________________________________________________________________________
*****INTRO TO GIT RSTUDIO*****
__________________________________________________________________________
__________________________________________________________________________






